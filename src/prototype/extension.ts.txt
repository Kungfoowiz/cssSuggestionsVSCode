// The module 'vscode' contains the VS Code extensibility API
// Import the necessary extensibility types to use in your code below
import {
    window, commands, Disposable,
    ExtensionContext, StatusBarAlignment, StatusBarItem,
    TextDocument, languages, Position,
    Hover, CompletionItem
} from 'vscode';


// This method is called when your extension is activated. Activation is
// controlled by the activation events defined in package.json.
export function activate(context: ExtensionContext) {

    const COMPLETION_TRIGGER = ":";

    const cssSuggestions = require('../src/css_suggestion.json');

    // // Use the console to output diagnostic information (console.log) and errors (console.error).
    // // This line of code will only be executed once when your extension is activated.
    // console.log('Congratulations, your extension "WordCount" is now active!');

    // // create a new word counter
    // let wordCounter = new WordCounter();

    // let disposable = commands.registerCommand('extension.sayHello', () => {
    //     wordCounter.updateWordCount();
    // });

    // // Add to a list of disposables which are disposed when this extension is deactivated.
    // context.subscriptions.push(wordCounter);
    // context.subscriptions.push(disposable);




    // Use the console to output diagnostic information (console.log) and errors (console.error).
    // This line of code will only be executed once when your extension is activated.
    console.log('11111Congratulations, your extension "WordCount" is now active!');

    // create a new word counter
    let wordCounter = new WordCounter();
    let controller = new WordCounterController(wordCounter);

    let completion = new Completion(cssSuggestions);
    let completionController = new CompletionController(completion);

    // Add to a list of disposables which are disposed when this extension is deactivated.
    context.subscriptions.push(controller);
    context.subscriptions.push(wordCounter);

    context.subscriptions.push(completion);
    context.subscriptions.push(completionController);


    context.subscriptions.push(

        languages.registerCompletionItemProvider('*', {
            provideCompletionItems: (document, position, token) => {
                return completion.performCompletion(document, position);
            },
            resolveCompletionItem: (item, token) => item
        },
            COMPLETION_TRIGGER
        ));



    languages.registerHoverProvider('*', {
        provideHover(document, position, token) {
            var text = document.getText();
            var char = document.lineAt(position.line).text[position.character];

            return new Hover("You are hovering letter [" + char + "]");
        }
    });


}



class Completion {

    private cssSuggestions: any;

    private statusBarItem: StatusBarItem = window.createStatusBarItem(StatusBarAlignment.Left);

    private counter: number;

    constructor(cssSuggestions: any) {
        this.counter = 0;

        this.cssSuggestions = cssSuggestions;
    }

    public performCompletion(document: TextDocument, position: Position): any {

        var result = [];

        // var item = new CompletionItem("This is a test completion item");


        // var entry = this.cssSuggestions.properties[0][0];
        // var keyName = Object.keys(entry)[0];

        // result.push(new CompletionItem(keyName));

        var matchProperty = document.lineAt(position.line).text.replace(":", "").trim();


        for (var key in this.cssSuggestions.properties) {

            var obj = Object.keys(this.cssSuggestions.properties[key][0]);
            // var target = "width";

            var target = matchProperty;



            if (obj[0] === target) {

                for(var valueIndex in this.cssSuggestions.properties[key][0][target].values){
                    result.push(new CompletionItem(" " + this.cssSuggestions.properties[key][0][target].values[valueIndex]));
                }
            }
        }





        //ret.push(new CompletionItem("block"));
        // ret.push(new CompletionItem("contents"));
        // ret.push(new CompletionItem("flex"));
        // ret.push(new CompletionItem("flow-root"));
        // ret.push(new CompletionItem("none"));

        // ret.push(item);

        //var text = document.lineAt(position.line).text.replace(":", "").trim();

        // var matchobj = JSON.parse(this.matchText);



        // var text = document.lineAt(position).text.slice(0, position.character)[1];

        this.statusBarItem.text = 'completion workin! ' + this.counter++;
        this.statusBarItem.show();

        //console.log("registerCompletionItemProvider workin!");

        return result;
    }

    dispose() {

    }


}


class CompletionController {

    private completion: Completion;

    private disposable: Disposable;

    constructor(completion: Completion) {
        this.completion = completion;

        let subscriptions: Disposable[] = [];

        this.disposable = Disposable.from(...subscriptions);
    }

    dispose() {
        this.completion.dispose();
        this.disposable.dispose();
    }

}


class WordCounter {

    private _statusBarItem: StatusBarItem = window.createStatusBarItem(StatusBarAlignment.Left);

    public updateWordCount() {

        // Get the current text editor
        let editor = window.activeTextEditor;
        if (!editor) {
            this._statusBarItem.hide();
            return;
        }

        let doc = editor.document;

        // Only update status if a Markdown file
        //if (doc.languageId === "markdown") {
        let wordCount = this._getWordCount(doc);

        // Update the status bar
        // this._statusBarItem.text = wordCount !== 1 ? `${wordCount} Words` : '1 Word';
        this._statusBarItem.text = wordCount !== 1 ? `$(pencil) ${wordCount} Words` : '$(pencil) 1 Word';
        this._statusBarItem.show();
        //} else {
        //    this._statusBarItem.hide();
        //}
    }

    public _getWordCount(doc: TextDocument): number {

        let docContent = doc.getText();

        // Parse out unwanted whitespace so the split is accurate
        docContent = docContent.replace(/(< ([^>]+)<)/g, '').replace(/\s+/g, ' ');
        docContent = docContent.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
        let wordCount = 0;
        if (docContent !== "") {
            wordCount = docContent.split(" ").length;
        }

        return wordCount;
    }

    dispose() {
        this._statusBarItem.dispose();
    }
}



class WordCounterController {

    private _wordCounter: WordCounter;
    private _disposable: Disposable;

    constructor(wordCounter: WordCounter) {
        this._wordCounter = wordCounter;

        // subscribe to selection change and editor activation events
        let subscriptions: Disposable[] = [];
        window.onDidChangeTextEditorSelection(this._onEvent, this, subscriptions);
        window.onDidChangeActiveTextEditor(this._onEvent, this, subscriptions);

        // update the counter for the current file
        this._wordCounter.updateWordCount();

        // create a combined disposable from both event subscriptions
        this._disposable = Disposable.from(...subscriptions);
    }

    dispose() {
        this._disposable.dispose();
    }

    private _onEvent() {
        this._wordCounter.updateWordCount();
    }
}